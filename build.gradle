plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'maven-publish'
    id 'signing'
}

group = 'io.github.devbd1'

def versionFile = file("version.txt")
if (versionFile.exists()) {
    version = versionFile.text.trim()
} else {
    versionFile.text = project.version?.toString() ?: "0.0.1"
    version = versionFile.text.trim()
}
println "[CublexCore] Using project.version = ${version}"

description = 'Core API for Cublex Labs plugin ecosystem.'

repositories {
    mavenCentral()
//    maven {
//        name = "papermc-repo"
//        url = "https://repo.papermc.io/repository/maven-public/"
//    }
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "dmulloy2"
        url = "https://repo.dmulloy2.net/nexus/repository/public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "CodeMC"
        url = "https://repo.codemc.io/repository/maven-public/"
    }
    maven {
        name = "extendedclip"
        url = 'https://repo.extendedclip.com/releases/'
    }
    maven {
        name = "lushplugins"
        url = "https://repo.lushplugins.org/releases/"
    }
}

dependencies {
//    compileOnly("io.papermc.paper:paper-api:1.21.8-R0.1-SNAPSHOT")
    compileOnly("org.spigotmc:spigot-api:1.21.8-R0.1-SNAPSHOT") //spigotmc-repo
    compileOnly 'net.dmulloy2:ProtocolLib:5.4.0' //dmulloy2 "com.comphenix.protocol:ProtocolLib:5.1.0"
    implementation("commons-io:commons-io:2.15.1") //sonatype
    implementation("de.tr7zw:item-nbt-api:2.15.1") //CodeMC
    compileOnly("me.clip:placeholderapi:2.11.6") //extendedclip
    implementation("org.lushplugins:ChatColorHandler:4.0.0") //lushplugins
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
                'Main-Class': 'io.github.devbd1.cublexcore.Main' // optional, not needed for plugins
        )
    }

    from {
        configurations.runtimeClasspath.filter { it.name.endsWith("jar") }.collect { zipTree(it) }
    }

    archiveClassifier.set("") // creates CublexCore-1.1.0.jar instead of CublexCore-1.1.0-all.jar
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand(version: project.version)
        expand props
    }
}

tasks.register("printJdk") {
    doLast {
        println "Running with: " + System.getProperty("java.version")
    }
}

tasks.register("bumpVersion") {
    doLast {
        if (!versionFile.exists()) {
            throw new GradleException("version.txt not found.")
        }

        def currentVersion = versionFile.text.trim()
        def releaseType = project.hasProperty("releaseType") ? project.releaseType : "patch"

        def (major, minor, patch) = currentVersion.tokenize('.').collect { it.toInteger() }

        switch (releaseType) {
            case "major":
                major++; minor = 0; patch = 0; break
            case "minor":
                minor++; patch = 0; break
            case "patch":
                patch++; break
            default:
                throw new GradleException("Unknown releaseType: $releaseType. Use major, minor or patch.")
        }

        def newVersion = "${major}.${minor}.${patch}"
        versionFile.text = newVersion
        println "üîÅ Version bumped: $currentVersion ‚Üí $newVersion"
    }
}

tasks.register("bumpAndBuild") {
    dependsOn "bumpVersion", "build"
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {

            from(components["java"])

            pom {
                name.set("CublexCore")
                description.set("Core API for Cublex Labs Plugin Ecosystem")
                url.set("https://github.com/CublexLabs/CublexCore")

                licenses {
                    license {
                        name.set("Apache License, Version 2.0")
                        url.set("https://www.apache.org/licenses/LICENSE-2.0")
                    }
                }

                developers {
                    developer {
                        id.set("DevBD1")
                        name.set("Burak Dorman")
                        email.set("burakdorman@gmail.com")
                    }
                }

                scm {
                    connection.set("scm:git:git://github.com/CublexLabs/CublexCore.git")
                    developerConnection.set("scm:git:ssh://github.com/CublexLabs/CublexCore.git")
                    url.set("https://github.com/CublexLabs/CublexCore")
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")

            credentials {
//                username = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
//                password = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
//        maven {
//            name = "CublexLabs"
//            url = "https://repo.cublex.net/releases/"
//            credentials {
//                username = project.findProperty("cublexUser")
//                password = project.findProperty("cublexToken")
//            }
//        }

    }
}

signing {
    useInMemoryPgpKeys(
            System.getenv("GPG_PRIVATE_KEY"),
            System.getenv("SIGNING_PASSWORD")
    )
    sign publishing.publications.mavenJava
}